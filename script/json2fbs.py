#! /usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import codecs
import json
import re
import datetime
from collections import OrderedDict

def split_attributes(str):
    m = re.match("([^\(\)]+)\s*(\(.*\))", str)
    if m == None:
        return (str,"")
    else:
        return (m.group(1), " " + m.group(2))

def printFbs(rootName, nameSpace, jsonData):
    print '// generated by json2fbs.py\n'

    # output namespace
    print 'namespace {0};\n'.format(nameSpace)

    # output tables
    for table_name in jsonData:
        if table_name == "_meta":
            print 'table ' + rootName[0:1].upper() + rootName[1:] + " {"
            for item in jsonData[table_name]:
                name = item["name"]
                item_type, item_attributes = split_attributes(item["type"])
                table_name = name[0:1].upper() + name[1:]
                if item_type.find("array") >= 0:
                    print "    " + name + ":[" + table_name + "]" + item_attributes + ";"
                else:
                    print "    " + name + ":" + table_name + item_attributes + ";"
        else:
            print 'table ' + table_name[0:1].upper() + table_name[1:] + " {"
            for item in jsonData[table_name]:
                item_type, item_attributes = split_attributes(item["type"])
                print "    " + item["name"] + ":" + item_type + item_attributes + ";"
            print "}\n"
    print "}\n"

    # output root_type
    print 'root_type {0};'.format(rootName)

# ---
# root function
#
def json2fbs(jsonFile, rootName, nameSpace = ''):
    with open(jsonFile, 'r') as f:
        jsonData = json.loads(f.read(), object_pairs_hook=OrderedDict)
        if isinstance(jsonData, dict):
            printFbs(rootName, nameSpace, jsonData)
        else:
            print 'unsupported format. params:[{0}][{1}][{2}]'.format(jsonFile, rootName, nameSpace)

# ---
# default help message
#
def printHelp():
    print '''    need at least 2 args.
    __name__ json-file root-name [namespace]
    e.g. json2fbs.py master_schema.json Master test.mytest'''


# ---
# main function
#
if __name__ == '__main__':
    sys.stdout = codecs.lookup('utf_8')[-1](sys.stdout)
    argv = sys.argv
    argc = len(argv)
    if argc < 3:
        printHelp()
    elif argc < 4:
        json2fbs(argv[1],argv[2])
    else:
        json2fbs(argv[1],argv[2],argv[3])
