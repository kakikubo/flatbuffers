#! /usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import codecs
import json
import re
import argparse
import logging
from logging import info, warning, error
from collections import OrderedDict

class Json2LuaLabel():
    def upper_camel_case(self, s):
        return s[0:1].upper() + s[1:]

    def lower_snake_case(self, s):
        s = re.sub(r'([A-Z])', r'_\1', s).lower()
        return s[1:] if s[0] == '_' else s

    def collect_value(self, table, data, values):
        if isinstance(data, dict):
            for k, v in data.iteritems():
                if k == 'label':
                    if not values.has_key(table):
                        values[table] = []
                    values[table].append(v)
                else:
                    self.collect_value(table, v, values)
        elif isinstance(data, list):
            for d in data:
                self.collect_value(table, d, values)
        return values

    def generate_lua(self, pragma_once, table_values):
        s = "-- generated by json2lua-label.py\n"
        s += 'if ('+pragma_once+' == nil) then\n'
        s += '    '+pragma_once+' = 1\n'

        for table, values in table_values.iteritems():
            s += '\n'
            s += '    -- %s Label\n' % table
            for i, value in enumerate(values):
                if len(value) == 0:
                    continue
                if len(value.split('.')) > 1:
                    label = value.replace('.', '_')
                else:
                    label = "%s_%s" % (self.lower_snake_case(table), value)
                s += '    %s = "%s"\n' % (label, value)
        s += '\n'
        s += 'end\n'
        return s

    def generate(self, input_json, output_lua):
        j = None
        with open(input_json, 'r') as f:
            j = json.load(f, object_pairs_hook=OrderedDict)

        table_values = OrderedDict()
        for sheet, data in j.iteritems():
            table = self.upper_camel_case(sheet)
            self.collect_value(table, data, table_values)

        pragma_once = 'PRAGMA_ONCE_'+os.path.basename(output_lua).upper().replace('.', '_')
        s = self.generate_lua(pragma_once, table_values)

        with open(output_lua, 'w') as f:
            f.write(s)

if __name__ == '__main__':
    sys.stdout = codecs.lookup('utf_8')[-1](sys.stdout)
    parser = argparse.ArgumentParser(description = 'generate label.lua from master_data.json')
    parser.add_argument('input_json', metavar = 'master_data.json', help = 'input master data json file')
    parser.add_argument('output_lua', metavar = 'output.lua', help = 'output label lua file')
    parser.add_argument('--log-level', help = 'log level (WARNING|INFO|DEBUG). default: INFO')
    args = parser.parse_args()
    logging.basicConfig(level = args.log_level or "INFO", format = '%(asctime)-15s %(process)d %(levelname)s %(message)s')

    info("input.json = %s" % args.input_json)
    info("output.lua = %s" % args.output_lua)
    generator = Json2LuaLabel()
    generator.generate(args.input_json, args.output_lua)
    exit(0)

